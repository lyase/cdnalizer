/* 
**  mod_cdnalizer.c -- Apache sample cdnalizer module
**  [Autogenerated via ``apxs -n cdnalizer -g'']
**
**  To play with this sample module first compile it into a
**  DSO file and install it into Apache's modules directory 
**  by running:
**
**    $ apxs -c -i mod_cdnalizer.c
**
**  Then activate it in Apache's apache2.conf file for instance
**  for the URL /cdnalizer in as follows:
**
**    #   apache2.conf
**    LoadModule cdnalizer_module modules/mod_cdnalizer.so
**    <Location /cdnalizer>
**    SetHandler cdnalizer
**    </Location>
**
**  Then after restarting Apache via
**
**    $ apachectl restart
**
**  you immediately can request the URL /cdnalizer and watch for the
**  output of this module. This can be achieved for instance via:
**
**    $ lynx -mime_header http://localhost/cdnalizer 
**
**  The output should be similar to the following one:
**
**    HTTP/1.1 200 OK
**    Date: Tue, 31 Mar 1998 14:42:22 GMT
**    Server: Apache/1.3.4 (Unix)
**    Connection: close
**    Content-Type: text/html
**  
**    The sample page from mod_cdnalizer.c
*/ 

#include "../Rewriter.hpp"
#include "iterator.hpp"
#include "utils.hpp"

extern "C" {
#include "httpd.h"
#include "http_config.h"
#include "http_protocol.h"
#include "ap_config.h"

static const char cdnalizer_filter_name[] = "CDNALIZER";

/*
static const command_rec cdnalizer_filter_cmds[] = {
    AP_INIT_RAW_ARGS("CDNRewriteRule", cmd_cdnrewriterule, NULL, OR_FILEINFO,
                     "an URL-applied regexp-pattern and a substitution (cdn) URL");
}
*/

struct State {
    cdnalizer::apache::Iterator tmpbb;
};

static apr_status_t cdnalize_out_filter(ap_filter_t *filter, apr_bucket_brigade *bb)
{
    /* A bucket is a bunch of data
       A brigade is a bunch of buckets
       Each web page is made up of one or more brigades
       The filter->ctx lives for the life of that page */
    /* Don't pass empty brigodes down the line */ 
    if (APR_BRIGADE_EMPTY(bb)) {
        return APR_SUCCESS;
    }

    using cdnalizer::apache::Iterator;
    using cdnalizer::apache::EndIterator;
    using cdnalizer::apache::BrigadeGuard;

    Iterator start{bb};
    Iterator end = EndIterator(bb);
    Iterator lastPos = start;

    // Called when we find a range of unchanged data
    auto onUnchangedData = [&](Iterator start, Iterator end) {
        end.split(); // end's bucket now stops at pos
        // We'll return the start of the new next bucket
        Iterator result = end;
        ++result;
        // It's unlikely (impossible?) that we're gonna have to split the start bucket
        assert(start.isAtStartOfBlock());
        // Flush everything from start
        BrigadeGuard tmpbb; // Make a temporary brigade
        apr_bucket* bucket = start.block.bucket();
        apr_bucket* end = end.block.bucket();
        // Move all the buckets to the next brigade
        while (bucket != end) {
            apr_bucket* next = APR_BUCKET_NEXT(bucket);
            APR_BRIGADE_REMOVE(bucket);
            APR_BRIGADE_INSERT_TAIL(bucket);
            bucket = next;
        }
        // Send the next brigade to the next filter
        ap_pass_brigade(filter, tmpbb);
    };
    // Called when new data to push out the filter arrives
    auto newData = [&](const std::string& data) {
        BrigadeGuard tmpbb; // Make a temporary brigade
        // Copy the data to it. Needs to be copied because it's coming from a long lived data dict; not generated.
        apr_bucket* = apr_bucket_heap_create(data.cstr(), data.size(), NULL, filter->c->bucket_alloc);
        ap_pass_brigade(filter, tmpbb);
    };

    Iterator final = cdnalizer::rewriteHTML<Iterator, char>(

    struct State* state = filter->ctx;
    if (state == NULL) {
        /* This is the first time we've seen this request */
        filter->ctx = state = apr_palloc(filter->r->pool, sizeof *state);
        // state->tmpbb = apr_brigade_create(filter->r->pool, filter->c->bucket_alloc);
        state->tmpbb = NULL;
    }
    /* Get the first bucket */
    apr_bucket *bucket = APR_BRIGADE_FIRST(bb);
    const char *data;
    apr_size_t length;
    while (bucket != APR_BRIGADE_SENTINEL(bb)) {
        if (APR_BUCKET_IS_EOS(bucket)) {
            //return handle_last_bucket(bucket, state);
        }
        if (APR_BUCKET_IS_FLUSH(bucket)) {
            //return flush(bucket, state);
        }
        if (APR_BUCKET_IS_METADATA(bucket)) {
            // Just pass this bucket along
        }
        apr_status_t status;
        /* Get the data */
        status = apr_bucket_read(bucket, &data, &length, APR_BLOCK_READ);
        /* Push it through our parser and see what the result is */
        bucket = APR_BUCKET_NEXT(bucket);
    }
    return ap_pass_brigade(filter->next, bb);
}

static void cdnalizer_register_hooks(apr_pool_t *p)
{
    ap_register_output_filter(cdnalizer_filter_name, cdnalize_out_filter, NULL,
                              AP_FTYPE_CONTENT_SET);
}

/* Dispatch list for API hooks */
module AP_MODULE_DECLARE_DATA cdnalizer_module = {
    STANDARD20_MODULE_STUFF, 
    NULL,                  /* create per-dir    config structures */
    NULL,                  /* merge  per-dir    config structures */
    NULL,                  /* create per-server config structures */
    NULL,                  /* merge  per-server config structures */
    /*cdnalizer_filter_cmds, /* table of config file commands       */
    NULL,
    cdnalizer_register_hooks  /* register hooks                      */
};

}
